/**
 * @Author: koulei
 * @Description:
 * @File: main
 * @Version: 1.0.0
 * @Date: 2021/8/18 13:09
 */

package main

import (
	"fmt"
	"time"

	"github.com/tidwall/gjson"
)

var jsonStr = []byte(`
{
        "object_kind": "push",
        "event_name": "push",
        "before": "63ebba06372be0f3a4becae0bfb817c0baa1d40d",
        "after": "043159843ba04f3fb97eed4c679f37847f0b700c",
        "ref": "refs/heads/master",
        "checkout_sha": "043159843ba04f3fb97eed4c679f37847f0b700c",
        "message": null,
        "user_id": 1,
        "user_name": "Administrator",
        "user_username": "root",
        "user_email": "",
        "user_avatar": "https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon",
        "project_id": 1,
        "project": {
                "id": 1,
                "name": "test_repo",
                "description": "",
                "web_url": "http://8467e10ba7e2/root/test_repo",
                "avatar_url": null,
                "git_ssh_url": "git@8467e10ba7e2:root/test_repo.git",
                "git_http_url": "http://8467e10ba7e2/root/test_repo.git",
                "namespace": "root",
                "visibility_level": 0,
                "path_with_namespace": "root/test_repo",
                "default_branch": "master",
                "ci_config_path": null,
                "homepage": "http://8467e10ba7e2/root/test_repo",
                "url": "git@8467e10ba7e2:root/test_repo.git",
                "ssh_url": "git@8467e10ba7e2:root/test_repo.git",
                "http_url": "http://8467e10ba7e2/root/test_repo.git"
        },
        "commits": [
                {
                        "id": "043159843ba04f3fb97eed4c679f37847f0b700c",
                        "message": "Update signature.go",
                        "timestamp": "2021-08-17T15:03:00Z",
                        "url": "http://8467e10ba7e2/root/test_repo/commit/043159843ba04f3fb97eed4c679f37847f0b700c",
                        "author": {
                                "name": "Administrator",
                                "email": "admin@example.com"
                        },
                        "added": [],
                        "modified": [
                                "signature.go"
                        ],
                        "removed": []
                }
        ],
        "total_commits_count": 1,
        "push_options": {},
        "repository": {
                "name": "test_repo",
                "url": "git@8467e10ba7e2:root/test_repo.git",
                "description": "",
                "homepage": "http://8467e10ba7e2/root/test_repo",
                "git_http_url": "http://8467e10ba7e2/root/test_repo.git",
                "git_ssh_url": "git@8467e10ba7e2:root/test_repo.git",
                "visibility_level": 0
        }
}
`)

type AutoGenerated struct {
	ObjectKind        string      `json:"object_kind"`
	EventName         string      `json:"event_name"`
	Before            string      `json:"before"`
	After             string      `json:"after"`
	Ref               string      `json:"ref"`
	CheckoutSha       string      `json:"checkout_sha"`
	Message           interface{} `json:"message"`
	UserID            int         `json:"user_id"`
	UserName          string      `json:"user_name"`
	UserUsername      string      `json:"user_username"`
	UserEmail         string      `json:"user_email"`
	UserAvatar        string      `json:"user_avatar"`
	ProjectID         int         `json:"project_id"`
	Project           Project     `json:"project"`
	Commits           []Commits   `json:"commits"`
	TotalCommitsCount int         `json:"total_commits_count"`
	PushOptions       PushOptions `json:"push_options"`
	Repository        Repository  `json:"repository"`
}
type Project struct {
	ID                int         `json:"id"`
	Name              string      `json:"name"`
	Description       string      `json:"description"`
	WebURL            string      `json:"web_url"`
	AvatarURL         interface{} `json:"avatar_url"`
	GitSSHURL         string      `json:"git_ssh_url"`
	GitHTTPURL        string      `json:"git_http_url"`
	Namespace         string      `json:"namespace"`
	VisibilityLevel   int         `json:"visibility_level"`
	PathWithNamespace string      `json:"path_with_namespace"`
	DefaultBranch     string      `json:"default_branch"`
	CiConfigPath      interface{} `json:"ci_config_path"`
	Homepage          string      `json:"homepage"`
	URL               string      `json:"url"`
	SSHURL            string      `json:"ssh_url"`
	HTTPURL           string      `json:"http_url"`
}
type Author struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}
type Commits struct {
	ID        string        `json:"id"`
	Message   string        `json:"message"`
	Timestamp time.Time     `json:"timestamp"`
	URL       string        `json:"url"`
	Author    Author        `json:"author"`
	Added     []interface{} `json:"added"`
	Modified  []string      `json:"modified"`
	Removed   []interface{} `json:"removed"`
}
type PushOptions struct {
}
type Repository struct {
	Name            string `json:"name"`
	URL             string `json:"url"`
	Description     string `json:"description"`
	Homepage        string `json:"homepage"`
	GitHTTPURL      string `json:"git_http_url"`
	GitSSHURL       string `json:"git_ssh_url"`
	VisibilityLevel int    `json:"visibility_level"`
}

func main() {
	// fmt.Println("\nstarting json to struct")
	// start := time.Now()
	// var str AutoGenerated
	// err := json.Unmarshal(jsonStr, &str)
	// if err != nil {
	// 	return
	// }
	// fmt.Println(str.Commits[0].ID, str.Commits[0].Added, str.Commits[0].Modified, str.Commits[0].Removed)
	// fmt.Println("json to struct end, time: ", time.Since(start))

	fmt.Println("\nstarting gjson parase")
	start := time.Now()
	// s := gjson.GetManyBytes(jsonStr, "project.id", "project.name", "commits.0.id", "commits.0.added", "commits.0.modified", "commits.0.removed")
	// fmt.Println(s)
	generated := gjson.ParseBytes(jsonStr).Value().(map[string]interface{})
	fmt.Println(generated)
	fmt.Println("gjson end,time: ", time.Since(start))
}
